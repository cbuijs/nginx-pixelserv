user root;
worker_processes auto;
pid /run/nginx.pid;
#include /etc/nginx/modules-enabled/*.conf;

#error_log /var/log/nginx/error.log error;
error_log syslog:server=127.0.0.1:514,facility=local7,tag=nginx_error,severity=error,nohostname;

events {
	worker_connections 1024;
}

http {
	include	mime.types;
	default_type text/plain;

	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	keepalive_timeout 0;

	expires max;

	server_tokens off;
	ignore_invalid_headers on;

	log_format pixel "$remote_addr - $scheme://$http_host:$server_port$request_uri ($sent_http_content_type)";

	gzip off;

	root /var/www/pixel;
	autoindex off;

	allow all;

	# HTTP Ports (Return empty documents or pictures)
	server {
		root /var/www;

		access_log syslog:server=127.0.0.1:514,facility=local7,tag=PIXEL,severity=info,nohostname pixel;

		# Non-SSL
		listen 80 bind deferred default_server;
		listen [::]:80 bind deferred default_server;
		#listen 172.16.1.251:81 bind deferred;
		#listen 172.16.1.251:82 bind deferred;
		#listen 172.16.1.251:88 bind deferred;
		listen 591 bind deferred;
		listen [::]:591 bind deferred;
		#listen 172.16.1.251:3128 bind deferred;
		#listen 172.16.1.251:8000 bind deferred;
		listen 8008 bind deferred;
		listen [::]:8008 bind deferred;
		listen 8080 bind deferred;
		listen [::]:8080 bind deferred;
		#listen 172.16.1.251:8081 bind deferred;
		#listen 172.16.1.251:8118 bind deferred;
		#listen 172.16.1.251:8181 bind deferred;
		#listen 172.16.1.251:8123 bind deferred;
		#listen 172.16.1.251:8888 bind deferred;

		# SSL - Just port to reset with 444
		#listen 443 bind deferred;
		#listen [::]:443 bind deferred;

		server_name _;

                # WPAD
                location ~* ^((.*/)*(proxy.pac|wpad.dat?))$ {
			default_type application/x-ns-proxy-autoconfig;
			try_files /wpad/wpad.dat =200;
			break;
                }

               	# Return transparent pixel when image
		location ~* ^(.+?\.(bmp|gif|ico|jng|jpe?g|png|svgz?|tiff?|wbmp|webp))$ {
			default_type image/png;
			try_files /pixel/blocked.png =200;
			break;
		} 

		# Return empty javascript
		location ~* ^(.+?\.(es6?|javascript|js[ex]?)|ts)$ {
			default_type application/javascript;
			try_files /pixel/blocked.js =200;
			break;
		} 

		# Return blocked page
       		location ~* ^((.+?\.([jx]?html?))|/)$ {
			default_type text/html;
			try_files /pixel/blocked.html =200;
			break;
		}

		# Reset when SSL
		if ( $server_port ~* ^(8?443)$ ) {
			return 444;
                        break;
		}

		# Return empty but "ok" response (empty file)
       		location ~* ^.*$ {
			default_type text/plain;
			#try_files /pixel/empty =200;
			return 403 "[ Blocked ]";
		}
	}

}

# Provide DNS-over-TLS using local standard DNS server
stream {
	#log_format dot "$remote_addr";
	log_format dot '$remote_addr - $ssl_protocol $ssl_session_reused $ssl_cipher $ssl_server_name';
	access_log syslog:server=127.0.0.1:514,facility=local7,tag=DOT,severity=info,nohostname dot;


	#allow 127.0.0.1/32;
	#allow ::1/128;
        #allow 192.168.1.0/24;
	#allow 2001:981:1759::/48;
	#deny all;

	upstream dns-servers {
		server 127.0.0.1:53001 max_conns=50;
		server [::1]:53001 max_conns=50;
	}

	server {
		listen 853 ssl bind;
		listen [::]:853 ssl bind;

		#tcp_nodelay on;

		proxy_pass dns-servers;
		proxy_connect_timeout 1s;
	        proxy_timeout 3s;

		# Use certbot
		ssl_certificate /etc/letsencrypt/live/home.chrisbuijs.com/fullchain.pem;
		ssl_certificate_key /etc/letsencrypt/live/home.chrisbuijs.com/privkey.pem;

		ssl_protocols TLSv1.3 TLSv1.2;
		ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
		ssl_prefer_server_ciphers on;
		ssl_handshake_timeout 5s;
		ssl_session_cache shared:SSL:10m;
		ssl_session_timeout 1h;
	}
}

