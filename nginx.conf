user root;
worker_processes auto;
pid /run/nginx.pid;
#include /etc/nginx/modules-enabled/*.conf;

#error_log /var/log/nginx/error.log error;
error_log syslog:server=127.0.0.1:514,facility=local7,tag=nginx_error,severity=error,nohostname;

events {
	worker_connections 1024;
}


http {
	include	mime.types;
	default_type text/plain;

	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	keepalive_timeout 0;

	expires max;

	server_tokens off;
	ignore_invalid_headers on;

	log_format blocked "BLOCKED: $remote_addr - $scheme://$http_host:$server_port$request_uri ($sent_http_content_type)";
	access_log syslog:server=127.0.0.1:514,facility=local7,tag=nginx_blocked,severity=info,nohostname blocked;

	gzip off;

	root /var/www/pixel;
	autoindex off;

	allow all;

	# HTTP Ports (Return empty documents or pictures)
	server {
		root /var/www/pixel;

		# Non-SSL
		listen 172.16.1.251:80 bind deferred default_server;
		#listen 172.16.1.251:81 bind deferred;
		#listen 172.16.1.251:82 bind deferred;
		#listen 172.16.1.251:88 bind deferred;
		listen 172.16.1.251:591 bind deferred;
		#listen 172.16.1.251:3128 bind deferred;
		#listen 172.16.1.251:8000 bind deferred;
		listen 172.16.1.251:8008 bind deferred;
		listen 172.16.1.251:8080 bind deferred;
		#listen 172.16.1.251:8081 bind deferred;
		#listen 172.16.1.251:8118 bind deferred;
		#listen 172.16.1.251:8181 bind deferred;
		#listen 172.16.1.251:8123 bind deferred;
		#listen 172.16.1.251:8888 bind deferred;

		# SSL - Just port to reset with 444
		listen 172.16.1.251:443 bind deferred;
		#listen 172.16.1.251:8443 bind deferred;

               	# Return transparent pixel when image
		location ~* ^(.+?\.(bmp|gif|ico|jng|jpe?g|png|svgz?|tiff?|wbmp|webp))$ {
			default_type image/png;
			try_files /blocked.png =200;
		} 

		# Return empty javascript
		location ~* ^(.+?\.(es6?|javascript|js[ex]?)|ts)$ {
			default_type application/javascript;
			try_files /blocked.js =200;
		} 

		# Return blocked page
       		location ~* ^((.+?\.([jx]?html?))|/)$ {
			default_type text/html;
			try_files /blocked.html =200;
		}

		# Return empty but "ok" response (empty file)
       		location ~* ^.*$ {
			default_type text/plain;
			#try_files /empty =200;
			return 403 "[ Blocked ]";
		}

		# Reset when SSL
		if ( $server_port ~* ^(8?443)$ ) {
			return 444;
		}
	}
}

# Provide DNS-over-TLS using local standard DNS server
stream {
	log_format dot "DNS-OVER-TLS: $remote_addr";
	access_log syslog:server=127.0.0.1:514,facility=local7,tag=nginx_dot,severity=info,nohostname dot;

	upstream dns_tcp_servers {
		server 127.0.0.1:53;
	}
 
	server {
		listen 127.0.0.1:853 ssl;
		listen 172.16.1.251:853 ssl;

		proxy_pass dns_tcp_servers;

		# Create using: sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/ssl/nginx-selfsigned.key -out /etc/nginx/ssl/nginx-selfsigned.crt
		ssl_certificate /etc/nginx/ssl/nginx-selfsigned.crt;
		ssl_certificate_key /etc/nginx/ssl/nginx-selfsigned.key;

		ssl_protocols TLSv1.2;
		ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
		ssl_session_tickets on;
		ssl_session_timeout 4h;
		ssl_handshake_timeout 30s;
	}
}

